services:
  nifi:
    image: apache/nifi:2.0.0-M4
    container_name: nifi
    hostname: nifi
    ports:
      - '8443:8443'
    deploy:
      resources:
        limits:
          cpus: '4'  # Limita o uso de CPU
          memory: 3G  # Limita o uso de memÃ³ria
        reservations:
          cpus: '2'  # Reserva pelo menos
          memory: 2G  # Reserva pelo menos
    volumes:
      - ./jar:/opt/jar
#      - ./nifi/logs:/opt/nifi/nifi-current/logs/
      - ./nifi/properties:/opt/nifi/nifi-current/properties  #credentials.properties (minio)
#      - ./nifi/db/database_repository:/opt/nifi/nifi-current/database_repository
#      - ./nifi/db/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
#      - ./nifi/db/content_repository:/opt/nifi/nifi-current/content_repository
#      - ./nifi/db/provenance_repository:/opt/nifi/nifi-current/provenance_repository
    environment:
      NIFI_WEB_HTTPS_PORT: 8443
      SINGLE_USER_CREDENTIALS_USERNAME: admin
      SINGLE_USER_CREDENTIALS_PASSWORD: 123456789012
    networks:
      - network

  postgres:
    image: 'postgres:latest'
    hostname: postgres
    container_name: postgres
    expose:
      - '5432'
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: hive_db
    networks:
      - network

  minio:
    image: 'minio/minio:latest'
    hostname: minio
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio-data:/data
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server --console-address ":9001" /data
    networks:
      - network

  minio-mc:
    image: minio/mc:latest
    container_name: minio-mc
    depends_on:
      - minio
    entrypoint: |
      sh -c "
      sleep 10 &&
      mc alias set myminio http://minio:9000 minio minio123 &&
      mc mb myminio/landing &&
      mc mb myminio/bronze &&
      mc mb myminio/silver &&
      mc mb myminio/gold &&
      mc mb myminio/frames &&
      mc policy set public myminio/frames
      "
    networks:
      - network

  rtmp:
    image: alfg/nginx-rtmp
    container_name: rtmp
    ports:
      - "1935:1935"
      - "8080:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - network

  spark:
    image: bitnami/spark
    container_name: spark
    environment:
      - SPARK_MODE=master
    ports:
      - "8081:8080"
    volumes:
      - ./app:/opt/spark-apps
    depends_on:
      - minio
    networks:
      - network

  ffmpeg:
    image: linuxserver/ffmpeg
    container_name: ffmpeg
    depends_on:
      - rtmp
      - minio
    command: >
      ffmpeg -reconnect 1 -reconnect_delay_max 5 -i rtmp://rtmp:1935/stream -c:v libx264 -crf 18 -vf "fps=1" -f image2 /data/frames/frame_%04d.jpg
#-c copy -flags +global_header -f segment -segment_time 60 -segment_format_options movflags=+faststart -reset_timestamps 1 test%d.mp4
    volumes:
      - ./frames:/data
    networks:
      - network

volumes:
  minio-data:
    driver: local

networks:
  network:
    name: network
    driver: bridge

